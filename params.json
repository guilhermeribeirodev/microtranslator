{"name":"Microtranslator","tagline":"A Microservice for managing Translations in your application","body":"# MicroTranslator\r\n\r\nA PHP Microservice for managing Translations in your application. You can set it up anywhere in your stack \r\nand use it to *upload* and *download* translations.\r\n\r\n***\r\n\r\n# Introduction\r\n\r\nMicroTranslator is written in PHP, and currently uses MongoDB as its storage engine. For more details, feel free to head over\r\nthe [article on Marco Troisi's blog](http://www.marcotroisi.com/an-example-of-a-microservice/). The source code is being released \r\nunder the **MIT Licence**, which means you are free to reuse, modify and even sell your work based on it. If you do any of the above \r\nlisted actions, please consider [following its creator on Twitter](http://www.twitter.com/marcotroisi) as a way to say **thanks**!\r\n\r\n# Usage\r\n\r\n## Show all available locales\r\n\r\nTo see all locales available (e.g. en_GB, de_DE, af_ZA, etc.), just fire up the following request:\r\n\r\n    GET /locale\r\n    \r\nand you will get a nice JSON response that looks like this:\r\n\r\n```json\r\n{\"items\":\r\n    [{\r\n        \"_id\":{\"$id\":\"552384e6e02f4fe237c925d0\"},\r\n        \"locale\":\"de_DE\"\r\n    }, \r\n    {\r\n        \"_id\":{\"$id\":\"552384e6e02f4fe237c925d1\"},\r\n        \"locale\":\"en_GB\"\r\n    }],\r\n    \"count\":2\r\n}\r\n```\r\n\r\nAs you can see, the response will normally have an `items` section, with the actual result, and a `count` value, which will always\r\nrepresent the integer number of results.\r\n\r\n## Show all terms for a given locale\r\n\r\nIn order to see all the terms (available, translated words) for a given locale (e.g. de_DE), just do:\r\n\r\n    GET /translation?locale=de_DE\r\n    \r\nThe result will be something like this:\r\n\r\n```json\r\n{\"items\":\r\n    [{\r\n        \"Good morning\":\"Guten Tag\"\r\n    },\r\n    {\r\n        \"Hello\":\"Hallo\"\r\n    }],\r\n    \"total\":2\r\n}\r\n```\r\n\r\nAt the moment, *en_GB* is the default locale, in case you don't specify your `locale` parameter.\r\n\r\n## Show a single term for a given locale\r\n\r\nIn order to see only one term (e.g. \"Good morning\") for a given locale (e.g. it_IT), you can call:\r\n\r\n    GET /translation/Good+morning?locale=it_IT\r\n    \r\nThe result will be:\r\n\r\n```json\r\n{\"items\":\r\n    [{\r\n        \"Good morning\":\"Buongiorno\"\r\n    }],\r\n    \"total\":1\r\n}\r\n```\r\n\r\n## Insert/Update a term for a given locale\r\n\r\nTo insert a new term, or update an existing one, use the following:\r\n\r\n    POST /translation/Good+morning?locale=es_ES\r\n    \r\nwith POST parameter `translation` (e.g. `{ translation: \"Buenas Dias\"}`) \r\n    \r\nThe result will be a `true` or `false` value, based on the success of the operation.\r\n\r\n# Future\r\n\r\nAs you may have noticed, there is still work necessary in order for MicroTranslator to get where it should. In the future, that's \r\nwhat it will feature:\r\n\r\n- Authentication\r\n- Docker integration\r\n- A frontend UI for adding/updating terms (on a separate repository)\r\n- Some other interesting things!\r\n\r\n# Questions?\r\n\r\nPlease send me an email at hello@marcotroisi.com in order to ask your questions about MicroTranslator.\r\n\r\n# Ideas? Found a bug?\r\n\r\nFeel free to open a Github issue or even to fork and create a Pull Request.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}